#+title: 计算机系统导论 risc-v 
#+startup: overview
#+include: mytheme.setup

* Labs


* Assignment
** A1

#+begin_src python
cmake_minimum_required(VERSION 3.21)
project(word-count C)

# 设置编译器
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_COMPILER clang)

add_compile_options(
"-ggdb" # gdb调试支持
"-m64"  
) 
# add_compile_definitions(LINE_COUNT) # 宏定义
## add_compile_definitions(MACRO_CONSTANT_NAME=macro_value)

# 生成 compile_commands.json 文件  for clangd
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

include_directories(./include) # 头文件目录

add_executable(test_strcmp.bin)
target_sources(test_strcmp.bin PRIVATE
  ./test_strcmp.c
  ./str_cmp.c
)

# target_compile_options(test_strcmp.bin PRIVATE -ggdb)
# target_include_directories(YourExecutableName PRIVATE include)


add_executable(tokenize.bin)
target_sources(tokenize.bin PRIVATE
  ./tokenize.c
  ./vector_char.c
)


add_executable(dictionary.bin)
target_sources(dictionary.bin PRIVATE
  ./dictionary.c
  ./vector_char.c
  ./vector_string.c
  ./str_cmp.c
)


add_executable(linecount.bin)
target_compile_definitions(linecount.bin PRIVATE LINE_COUNT) # 宏定义
target_sources(linecount.bin PRIVATE
  ./linecount.c
  ./vector_char.c
  ./table_string.c
  ./str_cmp.c
)


add_executable(duplicate.bin)
target_sources(duplicate.bin PRIVATE
  ./dedup.c
  ./vector_char.c
  ./table_string.c
  ./duplicate.c
  ./str_cmp.c
)


add_executable(unit_test_vector_char.bin)
target_sources(unit_test_vector_char.bin PRIVATE
  ./unit_test_vector_char.c
  ./vector_char.c
)



add_executable(unit_test_table_string.bin)
target_compile_definitions(unit_test_table_string.bin PRIVATE LINE_COUNT) # 宏定义
target_sources(unit_test_table_string.bin PRIVATE
  ./unit_test_table_string.c
  ./table_string.c
  ./vector_char.c
  ./str_cmp.c
)

#+end_src


**** tokenize
#+BEGIN_HIDE

这里放置你的代码块

#+END_HIDE

#+BEGIN_SRC cpp :hidden:
#+BEGIN_EXAMPLE
  这里放置你的代码块
#+END_EXAMPLE
#+END_SRC


首先要实现用来存放字符的动态数组:
#+begin_src cpp
struct vector_char {
  uint32_t len; // 当前长度(已使用)
  uint32_t max; // 最大容量
  char *data; 
};
#+end_src

核心代码是扩容
#+begin_src cpp
  vector_char->data =
      realloc(vector_char->data, sizeof(char) * vector_char->max);
#+end_src


#+begin_src cpp
#include "vector_char.h"
#include <stdio.h>

/* Internal functions declared here . See bottom for definition */
static void _vector_char_expand(vector_char_t *vector_char);
static void _free(void *ptr);

/**
 * @brief Allocate header for describing vector chars. Initialize internal data
 * pointer to NULL
 *
 * @return vector_char_t*
 */
vector_char_t *vector_char_allocate(void) {
  /** 为动态数组结构体本身分配空间, 将容量,长度初始化为0 */
  vector_char_t *header = (vector_char_t *)malloc(sizeof(vector_char_t));
  if (!header)
    return NULL;

  header->data = NULL;
  header->len = header->max = 0;

  return header;
}

/**
 * @brief Clean up both the header describing vector_char and internal data
 *
 * @param vector_char
 */
void vector_char_delete(vector_char_t *vector_char) {
  if (!vector_char) // 为空则直接返回
    return;

  if (vector_char->max)
    _free(vector_char->data); // 释放字符序列

  _free(vector_char); //释放结构体本身
}
/** 在添加元素时进行扩容的判断*/
void vector_char_add(vector_char_t *vector_char, char entry) {
  if (vector_char->len >= vector_char->max)
    _vector_char_expand(vector_char);

  vector_char->data[vector_char->len++] = entry;
}

/**
 * @brief Get the character at a particular location
 *
 * @param vector_char
 * @param index
 * @return char
 */
char vector_char_get(vector_char_t *vector_char, uint32_t index) {
  if (index > vector_char->len)
    exit(EXIT_FAILURE);

  return vector_char->data[index];
}

/**
 * @brief returns the internal char array as a raw pointer
 * WARNING: Do not free on the outside. This will lead to inconsistent results
 * @param vector_char
 * @return char*
 */
char *vector_char_get_array(vector_char_t *vector_char) {
  return vector_char->data;
}

/**
 * @brief Internal use only. User does not interact with these functions
 *
 */
static void _vector_char_expand(vector_char_t *vector_char) {
  if (!vector_char->max) { // 若max == 0, 则说明data没有被分配空间
    vector_char->max = 16; // 为数组首次分配空间
    vector_char->data = malloc(vector_char->max * sizeof(char));
    if (!vector_char->data)
      exit(EXIT_FAILURE);
    return;
  }
  // 将当前容量扩大两倍,重新分配空间
  vector_char->max <<= 1;
  vector_char->data =
      realloc(vector_char->data, sizeof(char) * vector_char->max);
  if (!vector_char->data)
    exit(EXIT_FAILURE);
}

static void _free(void *ptr) {
  free(ptr);
  ptr = NULL;
}
#+end_src


* Week1

这门课程围绕着4个伟大的想法开展: 

1. 抽象层级
2. 局部性原理/ 内存层次
3. 并行(流水线)   
4. 性能测量和优化


** L1 数字系统

每个数字系统都有一个基数base, 它表示最多可以使用几个符号来表示数字.

对十进制,可以使用10个符号:0-9.

每个数字可以看成是有长度为N的符号序列, 从右往左,从0开始编号到 ~N-1~.

N位Base进制的数字的最大值是 $Base^{N-1}$









* Week2
