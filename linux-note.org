#+TITLE: linux命令杂记
#+OPTIONS: toc:t num:t

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./myorg.css"/>

#+begin_src 
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+end_src

* du -h 以可读形式显示文件大小 

#+begin_src sh
$ du -h linux-note.org 

12K	linux-note.org
#+end_src

** 查看目录下的大文件
#+begin_src 
du -sh .* * | grep G
#+end_src



* test命令

#+begin_src sh
test `命令` = 'str' 
test `命令` = 'string' -a `命令` = 'string'
test `命令` = "string" -o `命令` = 'string'
#+end_src

E.g
#+begin_src sh
  # 判断当前平台是否是linux
  test `uname -s` = 'Linux'
  echo $? # 返回零表示无错误发生 
#+end_src



* bash脚本的编写

** ~set -e~ 遇到错误就停止
bash脚本默认行为是忽略错误,继续运行.
在脚本开头设置set -e就会使得: 只要有命令返回值!=0整个脚本的运行就会终止

* pstree 查看进程树

~pstree -ap | grep mysql/redis ...~

在emacs中的shell运行pstree.
#+begin_src
sun@Salted-PC:saltedf.github.io [main] $ pstree -ap | grep emacs

  |           `-emacs,65 -nw .
  |               |   |-grep,217 --color=auto emacs
  |               `-{emacs},66

#+end_src


* strace 追踪程序的系统调用
用于debug和理解程序的流程.

#+begin_src bash
strace -f -s 65535 -i -t -T  -p <pid>    -o 输出文件 
#+end_src

有时候会输出大量信息, 根本无法分析, 若只是需要特定的系统调用,可以使用 ~-e trace=~ 进行过滤, 如:负责读取/接收这类的系统调用.
 
~-e trace=recvfrom,read,recv,recvmsg~

#+begin_src 
strace -f -s 65535 -i -t -T -e trace=write,sendto,send  -p <PID> 
#+end_src


统计各个系统调用总耗时:

#+begin_src bash
strace -c <程序>

strace -c -p <PID>
#+end_src

结果显示了各个系统调用所花费总时间以及所占百分比, 调用次数, 以及出错次数. 出错越多一般代码质量越差.
#+begin_src bash

% time     seconds  usecs/call     calls    errors syscall
------ ----------- ----------- --------- --------- ----------------
 49.27    0.009506           7      1281           clock_gettime
 18.75    0.003617           9       390           rt_sigprocmask
  9.05    0.001747           9       175           ioctl
  8.12    0.001567          17        92           write
  5.40    0.001042          23        45           pselect6
  2.48    0.000478          28        17           fcntl
  2.38    0.000459          13        35           rt_sigreturn
  1.37    0.000265           6        38           read
  1.37    0.000264           7        35           timerfd_settime
  1.29    0.000249          27         9           poll
  0.37    0.000071          35         2           kill
  0.16    0.000030          15         2           getpid
  0.00    0.000000           0         2           close
  0.00    0.000000           0         2           openat
------ ----------- ----------- --------- --------- ----------------
100.00    0.019295                  2125           total

#+end_src


代码分析组合拳: strace看关键调用. ==> 用calltree找出关键系统调用的调用关系. ==>用IDE细看这条调用链 


* objdump -D 显示可执行文件/库文件的反汇编

objdump -D XXX | less 
不加less会显示太多!


* ldd 显示链接信息

#+begin_src sh
$ ldd ./build/udpclient 

	linux-vdso.so.1 (0x00007ffcb2d85000)
	libstdc++.so.6 => /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f4c64e2a000)
	libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f4c64e0f000)
	libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4c64c1d000)
	libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f4c64ace000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f4c65024000)
#+end_src


* wget 保存整个网站

https://github.com/lujun9972/linux-document/blob/master/examples/10%20wget%20command%20examples.org

#+begin_src 
wget --mirror --convert-links --page-requisites ----no-parent -P /path/to/download https://example-domain.com
#+end_src

但这样可能会下载不全，原因可能有很多。这里遇到的问题是默认是不跨域名下载的。


需要运行第二次，并附加上多个选项 

#+begin_src 
wget --mirror --convert-links -r -D "www.seas.upenn.edu,www.cis.upenn.edu"  -A.pdf -A.zip -A.shtml --tries=1 --timeout=8  --span-hosts  -l 5  --page-requisites --no-parent -P ./  https://www.seas.upenn.edu/\~cis341/17sp/  
#+end_src


+ -A 指定那些没有被下载的文件类型 （需要观察网站特征获知）

+ --span-hosts 跨主机名下载。
  
+ -D 指定域名/主机名 list，否则将遍历大量无用的域名（需要观察网站特征获知）

+ --tries=1 重试一次，因为有些域名无法访问，也不含要下载的文件。

+ --timeout=10 设定超时时间，防止等待太长时间。



* 配置apt软件源


#+begin_src bash
sudo vim /etc/apt/source.list

sudo apt-get update
#+end_src





* 重启ssh服务



#+begin_src bash
sudo service ssh restart
#+end_src






* 查看ssh服务是否启动

#+begin_src bash
sudo lsof -i :22 
#+end_src





* 递归改变文件owner 

#+begin_src bash
chown -R sun:sun ./dir
#+end_src




* 汇编文件(.s)的结构

#+begin_src 
.text: 代码段
.data: 常量 字符串 初始化的全局变量
.bss: 不占用实际空间, 仅仅标记那些局部变量和未初始化的全局变量.
#+end_src


因为已知初值的且生命周期长的变量才有提前为它们分配空间的必要,因此data段才占用空间. bss段中记录的是局部变量/未初始化的全局变量, 没必要一开始就为这些量准备好空间, 只要在程序实际运行时为其准备空间即可. 







* makefile
** 定义变量


#+begin_src makefile
CC := gcc # 定义常量, 后续不能用+=
OBJS = hello.o world.o # 定义变量, 后续可以用+=增加
ObJS += fuck.o  
#+end_src





** 伪目标 .PHONY

通常是指那些不生成文件的. 只负责执行某些命令的.


#+begin_src makefile
.PHONY: clean  # 这个之后的target都是伪目标

clean: 
	-${RM} *.o ${target}
	echo "finish"

#+end_src






** 为整个项目添加宏定义

#+begin_src makefile

DEFS = -D_DEBUG -D_POSIX_SOURCE

FLAGS = -g ${DEFS}

#+end_src






** 为目标链接上库



#+begin_src makefile
LIBS = -lpthread -lqt

#+end_src






** 通配符

#+begin_src bash 
 * 所有
 % :任意一个文件
 ? :
#+end_src




#+begin_src bash
$@ 目标
$^ 全部的依赖文件
$< 首个依赖项 
#+end_src





#+begin_src makefile
${target} : ${OBJS}
	${CC} ${FLAGS} -o $@ $^ ${LIBS}


%.o : %.c
	${CC} -o $@  $^ 
#+end_src







** 函数调用



#+begin_src makefile
$(my_func arg1,arg2,arg3)
#+end_src



*** 当前目录下某一类型的所有文件形成的列表

#+begin_src makefile
SRC = $(wildcard *.c)  ==> hello.c world.c fuck.c  
#+end_src





*** 将列表中的所有匹配项替换为指定形式

#+begin_src makefile
OBJS = $(patsubset %.c,%.o,${SRC} ) 

# 将 SRC = hello.c fuck.c 替换成 hello.o fuck.o 
#+end_src








* GDB

gef/cgdb/emacs gdb-many-windows

** 为可执行文件设置环境变量
set environment FOO = XX 
unset environment FOO

** 为可执行程序传参

+ 进入gdb shell后: 

~run arg1 arg2 ...~

~set args arg1 arg2 arg3~

+ 启动gdb时通过命令行传参:

~gdb ./main --args ./main a1 a2 a3 ...~

这种方式需要额外再写一次可执行文件的路径.




** 显示某文件源代码

 #+begin_src bash
 l / list <函数> 
 #+end_src

 默认显示10行


 当有多个文件时, 为了显示其中一个文件要在文件名后加 ~:N~ , 否则会被视作函数名. 
 #+begin_src
 list myfile.cc:1
 #+end_src



** 添加断点

 用break可以添加断点, 既能在指定行上添加, 也能为指定函数添加断点.(经常用在一行中有多个函数时)

 #+begin_src gdb
 break myfile.cc:100
 =====================
 break myfunc
 #+end_src

** 查看断点
显示了断点是否被禁用, 以及断点打在何处. 每个断点都有一个ID, 对断点的操作都基于此ID
#+begin_src 

(gdb) info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000408d60 in test_scanner_hello_Test::TestBody() at /home/sun/src/my_compiler/mytest/test_scanner.cc:10
#+end_src

** 禁用断点

#+begin_src gdb
(gdb) disable breakpoints 4 
(gdb) i b
Num     Type           Disp Enb Address            What
4       breakpoint     keep n   0x0000000000408d60 in test_scanner_hello_Test::TestBody() at /home/sun/src/my_compiler/mytest/test_scanner.cc:10

#+end_src

** 重新启用断点
#+begin_src 
(gdb) enable 4
(gdb) i b 
Num     Type           Disp Enb Address            What
4       breakpoint     keep y   0x0000000000408d60 in test_scanner_hello_Test::TestBody() at /home/sun/src/my_compiler/mytest/test_scanner.cc:10
#+end_src

** 删除断点
用断点序号指定要删除的断点
#+begin_src gdb
(gdb) delete breakpoints 1
#+end_src


** 保存断点到文件
这个功能本身很简陋, 使用前提是源代码不能修改过.
save breakpoints myfile

恢复断点:
source <myfile>




** 单步跳过 next
不会进入函数内部.

** 继续执行, 直至遇到断点 
continue

** 运行到某处,忽略期间的断点

until <N行> 运行下面N行, 忽略之间的断点.

** 进入到函数内部
step

** 从函数中跳出并暂停
finish



** 强制从函数中返回特定值
return 
相当于一种特殊的jump, 并不会将函数体执行完.并指定一个返回值
** 跳转到指定位置继续执行
jump linenum 

跳转后不会自动暂停, 需要断点.

** 显示当前所有的局部变量
info loacls
** 变量/表达式相关

*** 打印变量/表达式
#+begin_src gdb 
(gdb)  print tk.kind_
$2 = mycompiler::Token::INT
#+end_src

*** 自动显示变量值
display
每次都将这些变量的值打印处理.

#+begin_src 
(gdb) info display
Auto-display expressions now in effect:
Num Enb Expression
1:   y  tk.kind_
#+end_src

*** 取消对变量的自动显示
undisplay + N





*** 显示变量/表达式类型
用what/whatis
#+begin_src gdb
(gdb) what tk.kind_
type = mycompiler::Token::Kind
(gdb) what 1+3
type = int
(gdb) whatis tk.kind_
type = mycompiler::Token::Kind
#+end_src

*** 修改变量的值
可以在不修改源码的情况下对一些值进行设置.

#+begin_src 
(gdb) set var tk.kind_ = mycompiler::Token::END
#+end_src



*** 监视某变量的值
只要这个值发生改变就会自动暂停,并显示新值和旧值.

watch tk.kind_


显示所有watchpoints
info watchpoints




** 栈相关

*** 显示堆栈信息: bt



*** 切换栈帧
up/down: 上一层栈帧/下一层栈帧

frame N 切换到指定栈帧中


** 调试已经运行的程序

首先需要获得其进程pid

attach PID

detach


** 检查点
通过fork出新的进程来保存当前运行位置和状态.

*** 在当前位置添加checkpoint
checkpoint 


*** 查看所有checkpoints
info checkpoints


*** 删除指定checkpoint

delete checkpoint N






** 线程 

*** 显示所有线程 
info threads

*** 切换到指定线程
thread N






** 以指定格式显示某地址处的内容

x/格式+长度 <地址>



** 反向运行

记录反向运行所需信息

target record-full 


reverse-next
reverse-XXX



* [[./cmake-learning.org][CMake]] 





