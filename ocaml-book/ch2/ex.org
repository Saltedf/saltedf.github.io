#+include: ../../mytheme.setup




* [[https://cs3110.github.io/textbook/chapters/basics/exercises.html][ch2 ex]]

** values
#+begin_src ocaml
  utop # 7* (1+2+3) ;;
  - : int = 42

  utop # "CS " ^ string_of_int 3110 ;; 
  - : string = "CS 3110"
#+end_src

** operators
#+begin_src ocaml
  utop # 42 * 10 ;;
  - : int = 420

  utop # 3.14 /. 2.0 ;;
  - : float = 1.57


  utop # 4.2 *. 4.2 *. 4.2 *. 4.2 *. 4.2 *. 4.2 *. 4.2 ;;
  - : float = 23053.933324800008
#+end_src

** equality 
#+begin_src ocaml
utop # 42 = 42 ;;
- : bool = true

utop # "hi" = "hi" ;;  structural equality
- : bool = true

utop # "hi" == "hi" ;;  physical equality :compare pointers/addresses
- : bool = false
#+end_src

** assert 
#+begin_src ocaml
  utop # assert true ;;
  - : unit = ()
#+end_src
#+begin_src ocaml
  utop # assert false ;;

  Exception: "Assert_failure //toplevel//:1:0"
  Called from Stdlib__Fun.protect in file "fun.ml", line 33, characters 8-15
  Re-raised at Stdlib__Fun.protect in file "fun.ml", line 38, characters 6-52
  Called from Topeval.load_lambda in file "toplevel/byte/topeval.ml", line 89, characters 4-150
#+end_src

#+begin_src ocaml
utop # assert (2110 != 3110 );;
- : unit = ()
#+end_src

** if
#+begin_src ocaml
utop # if 2 > 1 then 42 else 7 ;;
- : int = 42
#+end_src

** double fun

#+begin_src ocaml
  let double x = 2 * (x) ;;
  
  assert ( (double (-100)) = (-200)) ;
  assert ( 1 =  (double 0));
  assert ( 46 = (double 23)) ;;
#+end_src

** more fun

*** cube

#+begin_src ocaml
let cube x : float  = x *. x *. x ;;
#+end_src

*** sign

#+begin_src ocaml
  let sign x : int  =
    if x > 0 then 1
    else if x = 0 then 0
    else -1
  ;;
#+end_src

*** the area of a circle

#+begin_src ocaml
  let area_of_circle r : float =
    if r < 0. then failwith "r<0" ;
    ( 3.1415926 *. r *.  r)
  ;;

  let absf x :float =
    if x >= 0. then x
    else (-1.) *.  x
  ;;

  (** [r] is the raduis of a circle *)
  let test_area_of_circle r expected_area =
    assert (absf ((area_of_circle r) -.  expected_area) < 0.01 )
  ;;

  test_area_of_circle 2. 12.56 ;;
#+end_src



** RMS 均方根 

#+begin_src ocaml
let rms x y =  sqrt @@ (x *. x +. y *. y) /. 2. ;;
#+end_src


** date fun

#+begin_src ocaml
  (** [m] should be a month. [d] is day.
      if [m] and [d] is a valid date, then returns true *)
  let date (m:string) ( d:int)  =
    if (  m = "Jan" && d>=1 && d <= 31
	|| m= "Feb" && d>=1 && d <=28
	|| m = "Mar" && d>=1 && d <= 31
	|| m = "Apr" && d>=1 && d < 31
	|| m = "May" && d>=1 && d <= 31
	|| m = "Jun"  && d>=1 && d < 31
	|| m = "Jul" && d>=1 && d <= 31
	|| m = "Aug" && d>=1 && d < 31
	|| m = "Sept" && d>=1 && d <= 31
	|| m = "Oct" && d>=1 && d < 31
	|| m = "Nov" && d>=1 && d <= 31
	|| m = "Dec" && d>=1 && d < 31 )
    then true 
    else false
  ;;

#+end_src



** fib
#+begin_src ocaml
    let rec fib n =
      if n = 1 then 1
      else if n = 2 then 1
      else fib (n-1) + fib (n-2)
  ;;
#+end_src

** fib fast
#+begin_src ocaml
  let rec helper  nstep pp p =
    if nstep = 1 then p
    else helper (nstep-1) p (pp+p )
  ;;

  let fib_fast n = helper n 0 1 ;;
#+end_src

** func type 
#+begin_src ocaml
let f x = if x then x else x  (* bool -> bool *)
let g x y = if y then x else x  (* 'a -> bool -> 'a *)
let h x y z = if x then y else z  (* bool -> 'a -> 'a -> 'a *)
let i x y z = if x then y else y  (* bool -> 'a -> 'b -> 'a *)
#+end_src


** divide
Write a function divide : numerator:float -> denominator:float -> float. Apply your function.


#+begin_src ocaml
  let divide numerator denominator =
    if (denominator = 0.) then failwith "divide 0" ;
    numerator /. denominator
    ;;
#+end_src


** associativity
Suppose that we have defined let add x y = x + y.
Which of the following produces an integer, which produces a function,
and which produces an error?
Decide on an answer, then check your answer in the toplevel.
#+begin_src ocaml
add 5 1  --> int
add 5    --> func
(add 5) 1 --> int
add (5 1) --> error
#+end_src



** average
Define an infix operator +/. to compute the average of two floating-point numbers. For example,

1.0 +/. 2.0 = 1.5

0. +/. 0. = 0.

#+begin_src ocaml
  let ( +/. ) a b =
   ( a +. b) /. 2.0
  ;;
#+end_src



** hello world

print_endline "Hello world!";;

print_string "Hello world!";;



#+begin_src ocaml
  print_string "hello world" ;;
  hello world- : unit = ()

  print_endline "hello world" ;;
  hello world
  - : unit = ()
#+end_src
